ic[i] <- res$combined$TCOSTS[3]
io[i] <- res$combined$QALY[3]
icer[i] <- res$ICER$combined
# update progress bar
setTxtProgressBar(pb, i)
}
Sys.time() - p
library(ggplot2)
ggplot(data=data.frame(io,ic), aes(y=ic, x=io)) +
geom_point() +
stat_ellipse()
ScatterPlot(io, ic)
ScatterPlot <- function(io, ic) {
plot(x=io, y=ic,
xlim=c(0,max(io)),ylim=c(min(ic),max(ic)),
axes=F,frame.plot=F,ann=F,
xaxt="n",yaxt="n",pch=1,cex=0.7)
car::dataEllipse(x=io, y=ic, levels=0.95, plot.points=F, lty=1, lwd=1, col="blue", center.pch=F)
axis(1, pos=0, lwd=1, cex.axis=0.7, tcl=NA, mgp = c(3, 0.2, 0))
mtext("QALYs gained", side = 1, line = 0, cex=0.7, padj = 0)
axis(2, pos=0, lwd=1, cex.axis=0.7, las=1, cex.lab=0.7, tcl=NA, mgp = c(3, 0.5, 0))
mtext("Incremental Costs", side = 2, line = 2.5, cex=0.7, padj = 0)
}
ScatterPlot(io, ic)
dat <- data.frame(ic,io)
colnames(dat) <- c("Incremental Cost","QALYs gained")
p <- plot_ly(dat, x=~io, y=~ic, type="scatter", mode="markers",
marker = list(size = 10,
color = 'rgba(0, 172, 193, .1)',
line = list(color = 'rgba(152, 24, 4, .8)',
width = 1)))
p <- plotly::plot_ly(dat, x=~io, y=~ic, type="scatter", mode="markers",
marker = list(size = 10,
color = 'rgba(0, 172, 193, .1)',
line = list(color = 'rgba(152, 24, 4, .8)',
width = 1)))
p
tornado <- plotly::plot_ly(dsa,y=~var, x=~lower, type="bar", orientation="h",offset=0,base=res$combined$TCOSTS[3],name="Low Input") %>%
add_trace(y=~var, x=~upper, type="bar",name="High Input") %>%
layout(xaxis=list(title="Incremental Cost",
range=c(160000,250000),
showgrid = FALSE),
yaxis=list(title="",
categoryarray=~var,
categoryorder="array"),
font=list(family="Arial",size=5))
tornado
# run model
res <- Run(baseinputs,basetransitions)
res
View(dat)
rm(list=ls())
library(tidyverse)
nStates <- 10
nCycles <- 70
time <- 1
cycles <- seq(0, nCycles-1, by = time)
## general parameters
# discounts
discCosts <- 0.03
discOutcomes <- 0.03
age <- 25
# discount factor
discFactCosts <- 1 / (1 + discCosts) ^ cycles
discFactOutcomes <- 1 / (1 + discOutcomes) ^ cycles
## Uganda life tables
lifeTab <- data.frame(index = 1:(((100 - 15) / 5) + 1),
ages = seq(15,100, by =5),
p.death = c(0.01654,0.02436,0.03422,
0.04226,0.05455,0.06294,
0.07488,0.07234,0.08912,
0.11197,0.15825,0.25336,
0.34985,0.49909,0.66945,
0.78085,0.84522,1))
# Uganda Schizophrenia death probabilities
schizoTab <- data.frame(index = 1:6,
ages = c(15,30,45,60,70,80),
p.death = c(0.002400343,0.006467183,
0.011388423,0.017324063,
0.048367593,0.051242471))
# Uganda life expectancy
lifeExp <- data.frame(index = 1:(((100-15)/5)+1),
ages = seq(15,100,by=5),
yrs = c(44.29642517,43.13052033,39.14499234,
35.44341604,32.12093464,28.82998534,
25.59850526,22.75574099,19.3353071,
15.98246432,12.95010091,9.914732297,
7.935541753,5.860442594,4.571011504,
3.765350185,3.2739,2.5))
## age in each cycle
ages <- age + cycles
# match age in each cycle with a probability of death
p.death <- lifeTab$p.death[match(findInterval(x=ages,vec=lifeTab$ages),lifeTab$index)]
p.Schizo.death <- schizoTab$p.death[match(findInterval(x=ages,vec=schizoTab$ages),schizoTab$index)]
expLife <- lifeExp$yrs[match(findInterval(x=ages,vec=lifeExp$ages),lifeExp$index)]
# calculate probability of death (from other causes, schizophrenia specific -- but not both)
pDie <- p.death + p.Schizo.death - (p.death * p.Schizo.death)
# probability of hospitalization for untreated
pHospUntrt <- 0.732864698
# probabilities of remission for drugs given in hospital
pRemitCPZ <- 0.7875; pRemitHAL <- 0.744827586
## Chlorpromazine transition probability data
pHospCPZ <- 63/207; disAECPZ <- 0.106658025195199; disEffCPZ <- 0.176660906510518; disOtherCPZ <- 0.211334358250816
## Haloperidol transition probability data
pHospHAL <- 14/64; disAEHAL <- 12/103; disEffHAL <- 34/103; disOtherHAL <- 16/103
## Risperidone transition probability data
pHospRIS <- 0.102373333692592; disAERIS <- 0.0692823071652952; disEffRIS <- 0.191684782510102; disOtherRIS <- 0.214108664053938
## Olanzapine transition probability data
pHospOLA <- 0.0768945299878179; disAEOLA <- 0.129543172415015; disEffOLA <- 0.0994867397236273; disOtherOLA <- 0.164542425907481
## Quetiapine transition probability data
pHospQUE <- 0.139505194968936; disAEQUE <- 0.101934342770149; disEffQUE <-0.196409182721273; disOtherQUE <- 0.235311565243028
# disutility parameters
acuteDALY <- 0.756
residualDALY <- 0.576
disutilEPS <- 0.074
disutilWeight <- 0.031
pEPSPLA <- 0.064467766
epsCPZ <- 2.65
epsHAL <- 4.76
epsOLA <- 1
epsRIS <- 2.09
epsQUE <- 1.01
epsFLU <- 0.83
durEPS <- 0.25
pWtCPZ <- 0.095388958
pWtHAL <- 0.140921288
pWtOLA <- 0.211381931995265
pWtRIS <- 0.0956588334466904
pWtQUE <- 0.110197918584854
pWtFLU <- 0.0812338210596357
pDiabetesHAL <- 0.0524
diabCPZ <- 1.41
diabHAL <- 1
diabOLA <- 1.77
diabRIS <- 1.22
diabQUE <- 1.21
pDiabetesFLU <- 0.06
cDiabetes <- 627.4536434
pFoot <- 0.03968254
pNeuro <- 0.464285714
pImpotent <- 0.103174603
pNephro <- 0.047619048
pIHD <- 0.047619048
dDiabetes <- 0.015
dFoot <- 0.023
dNeuro <- 0.099
dImpotent <- 0.019
dNephro <- 0.105
dIHD <- 0.066
## microcosting parameters
major_week <- 1
minor_week <- 2
duration_major <- 20
duration_minor <- 20
duration_drugadmin <- 20
PSY_major <- 1
PCO_major <-	1
PNO_major <- 2
PCO_minor <- 1
PNO_minor <- 2
PNO_drugadmin <- 1
duration_consult <- 20
duration_drugdisp <- 10
PSY <- 1
PCO <- 1
nurse <- 1
pharm <- 1
PSY_prop <- 0.25
nurse_prop <-	1
pharm_prop <- 1
workhours_year <- 2000
rate_psy <- 5048.894063
rate_pco <- 1261.156383
rate_pno <- 970.1202949
rate_pharm <- 1086.53473
chlorpromazine_cost <- (196.46/145.14)*0.0183
haloperidol_cost <- (196.46/145.14)*0.0206
quetiapine_cost <- 0.388048118
olanzapine_cost <- 0.0887
risperidone_cost <- 0.0323
fluphenazine_cost <- 1.4056
artane_cost <- (196.46/145.14)*0.0122235157159488
chlorpromazine_qty <- 4
haloperidol_qty <- 1
quetiapine_qty <- 2
olanzapine_qty <- 1
risperidone_qty <- 2
fluphenazine_qty <- 2
artane_qty <- 1
FBC_cost <- 1.863019014
ESR_cost <- 0.250291036
TPHA_cost <- 0.667830811
VDRL_cost <- 0.332557237
HIV_cost <- 1.601862631
TPHA_proportion <- 0.1
FBC_freq <-	1
ESR_freq <- 1
TPHA_freq <- 1
VDRL_freq <- 1
HIV_freq  <- 1
capital_costs_per_inpatient_per_day <- 8.463804487
capital_costs_per_outpatient_visit <- 2.492518694
averagetravel_cost <- 2
GDP_percapita <- 547
LOS <- 60
visitation_frequency <- 1
exchangerate_dollar <- 2577
caregiver_prop <- 0.4
caregiver_visit <- 0.3
caregiver_freq <- 1
every <- 7
pDieHosp <- 0.000684838
laborforcerate <- 0.706
unemploymentrate <- 0.052
DALY_caretaker <- 0.25
## some subroutines for calculating various stuff
# 1) extrapyramidal side effects
eps.risk <- function(base.p, drug.OR){
return(drug.OR * base.p/(1 - base.p + (drug.OR * base.p)))
}
# 2) Diabetes risk
diab.risk <- function(base.p, drug.RR) {
return(base.p * drug.RR)
}
disutilDIAB <- pNeuro * dNeuro + pFoot * dFoot + pImpotent * dImpotent + pNephro * dNephro + dDiabetes
# 3) costs models
# a) drug costs
ip.drug.costs <- function(cost, qty) {
return(cost * qty * 60)
}
op.drug.costs <- function(cost, qty) {
return(cost * qty * 365)
}
# no need for function for these below as they do not depend on the alternative chosen
# b) Personnel costs (a complicated formula)
ip.personnel.costs <- (((1/7)*(major_week*PSY_major*(duration_major/60)*(rate_psy/workhours_year))+(major_week*PCO_major*(duration_major/60)*(rate_pco/workhours_year))+(major_week*PNO_major*(duration_major/60)*(rate_pno/workhours_year))+(minor_week*PCO_minor*(duration_minor/60)*(rate_pco/workhours_year))+(minor_week*PNO_minor*(duration_minor/60)*(rate_pno/workhours_year)))+(PNO_drugadmin*(duration_drugadmin/60)))*time*LOS
op.personnel.costs <- (((duration_consult/60)*(PSY*PSY_prop*(rate_psy/workhours_year))+(PCO*(1-PSY_prop)*(rate_pco/workhours_year))+(nurse*nurse_prop*(rate_pno/workhours_year)))+(pharm*(duration_drugdisp/60)*(rate_pharm/workhours_year)))*visitation_frequency*time*12
# c) laboratory costs
ip.lab.costs <- (196.64/82.04)*(FBC_cost*FBC_freq+ESR_cost*ESR_freq+TPHA_cost*TPHA_freq*TPHA_proportion+VDRL_cost*VDRL_freq*(1-TPHA_proportion)*HIV_freq)*time*12
op.lab.costs <- ((196.64/82.04)*(FBC_cost*FBC_freq+ESR_cost*ESR_freq))*time*12
# d) capital and overheads
ip.capital.costs <- capital_costs_per_inpatient_per_day*time*LOS
op.capital.costs <- capital_costs_per_outpatient_visit*visitation_frequency*time*12
# e) travel costs
ip.carer.travel.costs <- averagetravel_cost*2*caregiver_prop*(time*LOS*caregiver_freq)/every
op.carer.travel.costs <- caregiver_prop*averagetravel_cost*2*visitation_frequency*time*12
ip.patient.travel.costs <- averagetravel_cost*2
op.patient.travel.costs <- averagetravel_cost*2*visitation_frequency*time*12
# f) Indirect costs
carer.indirect <- laborforcerate*(1-unemploymentrate)*GDP_percapita*time*DALY_caretaker*(264/365)
ip.indirect <- laborforcerate*(1-unemploymentrate)*GDP_percapita*time
op.indirect <- laborforcerate*(1-unemploymentrate)*(GDP_percapita/264)*(visitation_frequency*time*12)
## function to return markov traces
## INSTRUCTIONS
# 1) first argument is a vector of transition probabilities for first line agent in this order: c(disAE, disEff, disOther, pHosp, pWt, eps, diab, cost, qty)
# 2) first argument is a vector of transition probabilities for second line agent in this order: c(disAE, disEff, disOther, pHosp, pWt, eps, diab, cost, qty)
# 3) third argument is the probability of hospitalization of untreated
# 4) forth argument is the probability of remission when treated in the hospital
# 5) fifth argument is the number of states (creates the two timentional TP matrix)
# 6) sixth argument is the number of cycles (to create the third dimensionthat captures time varying death probabilities)
mtrace <- function(primary = numeric(),
secondary = numeric(),
pHospUntrt,
pRemit,
nStates,
nCycles) {
## Set up 3 dimensional transition probability arrays for comparators (3rd dimension captures time varying death probabilities)
## Then run memory based traces
trans <- array(0,c(nStates,nStates,nCycles))
trans[1,2,] <- primary[1] + primary[2]
trans[2,3,] <- secondary[1] + secondary[2]
# residual on 1st line to residual off 1st line and residual on 2nd line to residual off 2nd line
trans[1,4,] <- primary[3]
trans[2,5,] <- secondary[3]
# residual on 1st line to acute was on 1st line and residual on 2nd line to acute was on 2nd line
trans[1,8,] <- primary[4]
trans[2,9,] <- secondary[4]
trans[4,6,] <- trans[5,7,] <- pHospUntrt
trans[6,1,] <- trans[7,2,] <- trans[8,2,] <- trans[9,3,] <- pRemit
## get time varying death probabilities
for (i in 1:nCycles) {
# insert death probabilities
trans[,nStates,i] <- pDie[i]
# insert probability of remaining in the same state in each cycle (complement of rowsums)
diag(trans[,,i]) <- 1-rowSums(trans[,,i])
}
# set absorbing state (death) probability to 1
trans[nStates,nStates,] <- 1
# NOW RUN THE MODEL TO GENERATE TRACES
#Initialize population trace matrices [cycle,state,sojourn time]
trace <- array(0,c(nCycles,nStates,nCycles+1))
trace[1,,1] <- c(1,0,0,0,0,0,0,0,0,0)
# index the cycles by c, and for each cycle calculate the proportions transiting
for (c in 2:nCycles) {
for (cs in 1:(c-1)) {
## get cycle specific transition matrix
cond.trans <- trans[,,cs]
# how many people transition from cycle c-1 to c? a matrix multiplication
new.state <- trace[c-1,,cs] %*% cond.trans
# update the trace array (keeping track of time in state)
trace[c,,cs+1] <- new.state + trace[c,,cs]
}
}
# add up time spend in each state
pop.trace <- apply(trace,c(1,2),sum)
# calculate YLL
int.YLL <- rowSums(pop.trace[,1:9])
YLL <- numeric()
YLL[1] <- 0
for (i in 2:nCycles) {
YLL[i] <- int.YLL[i-1] * expLife[i] * pDie[i-1]
}
# calculate vector of utilities then count the DALYs
res.1st.line <- residualDALY + disutilWeight * primary[5] + eps.risk(pEPSPLA,primary[6]) * durEPS * disutilEPS + diab.risk(pDiabetesHAL,primary[7]) * disutilDIAB
res.2nd.line <- residualDALY + disutilWeight * secondary[5] + eps.risk(pEPSPLA,secondary[6]) * durEPS * disutilEPS + diab.risk(pDiabetesHAL,secondary[7]) * disutilDIAB
res.3rd.line <- residualDALY + disutilWeight * pWtFLU + eps.risk(pEPSPLA,epsFLU) * durEPS * disutilEPS + pDiabetesFLU * disutilDIAB
res.off.1st.line <- res.off.2nd.line <- residualDALY
ac.off.1st.line <- ac.off.2nd.line <- ac.was.on.1st.line <- ac.was.on.2nd.line <- acuteDALY + disutilWeight * pWtCPZ + eps.risk(pEPSPLA,epsCPZ) * durEPS * disutilEPS + diab.risk(pDiabetesHAL,diabCPZ) * disutilDIAB
utils.vec <- c(res.1st.line, res.2nd.line, res.3rd.line, res.off.1st.line, res.off.2nd.line, ac.off.1st.line, ac.off.2nd.line, ac.was.on.1st.line, ac.was.on.2nd.line, 0)
YLD <- pop.trace %*% utils.vec
DALYS <- discFactOutcomes * (YLL + YLD)
YLD.trace <- cbind(pop.trace[,1] * res.1st.line, pop.trace[,2] * res.2nd.line, pop.trace[,3] * res.3rd.line, pop.trace[,4] * res.off.1st.line, pop.trace[,5] * res.off.2nd.line, pop.trace[,6] * ac.off.1st.line, pop.trace[,7] * ac.off.1st.line, pop.trace[,8] * ac.off.1st.line, pop.trace[,9] * ac.off.1st.line)
# calculate vector of costs and compute total costs
c.res.1st <- op.drug.costs(primary[8], primary[9]) + eps.risk(pEPSPLA,primary[6]) * ip.drug.costs(artane_cost, artane_qty) + diab.risk(pDiabetesHAL,primary[7]) * cDiabetes + op.personnel.costs + op.lab.costs + op.capital.costs + op.carer.travel.costs + op.patient.travel.costs + op.indirect + carer.indirect
c.res.2nd <- op.drug.costs(secondary[8], secondary[9]) + eps.risk(pEPSPLA,secondary[6]) * ip.drug.costs(artane_cost, artane_qty) + diab.risk(pDiabetesHAL,secondary[7]) * cDiabetes + op.personnel.costs + op.lab.costs + op.capital.costs + op.carer.travel.costs + op.patient.travel.costs + op.indirect + carer.indirect
c.res.3rd <- fluphenazine_cost * fluphenazine_qty * 12 + eps.risk(pEPSPLA,epsFLU) * ip.drug.costs(artane_cost, artane_qty) + pDiabetesFLU * cDiabetes + op.personnel.costs + op.lab.costs + op.capital.costs + op.carer.travel.costs + op.patient.travel.costs + op.indirect + carer.indirect
c.res.off.1st <- c.res.off.2nd <- 0
c.ac.off.1st <- c.ac.off.2nd <- c.ac.was.on.1st <- c.ac.was.on.2nd <- ip.drug.costs(chlorpromazine_cost, chlorpromazine_qty) + eps.risk(pEPSPLA,epsCPZ) * ip.drug.costs(artane_cost, artane_qty) + diab.risk(pDiabetesHAL,diabCPZ) * cDiabetes + ip.personnel.costs + ip.lab.costs + ip.capital.costs + ip.carer.travel.costs + ip.patient.travel.costs + ip.indirect + carer.indirect
cost.trace <- cbind(pop.trace[,1] * c.res.1st, pop.trace[,2] * c.res.2nd, pop.trace[,3] * c.res.3rd, pop.trace[,4] * c.res.off.1st, pop.trace[,5] * c.res.off.2nd, pop.trace[,6] * c.ac.off.1st, pop.trace[,7] * c.ac.off.2nd, pop.trace[,8] * c.ac.was.on.1st, pop.trace[,9] * c.ac.was.on.2nd)
cost.vec <- c(c.res.1st, c.res.2nd, c.res.3rd, c.res.off.1st, c.res.off.2nd, c.ac.off.1st, c.ac.off.2nd, c.ac.was.on.1st, c.ac.was.on.2nd, 0)
costs <- discFactCosts * (pop.trace %*% cost.vec)
# return objects we can work with
return(list(trace = pop.trace, YLL = YLL, YLD.trace = YLD.trace, YLD = YLD, tot.DALYs = DALYS, DALYS = sum(DALYS), cost.trace = cost.trace, cost.vector = cost.vec, tot.costs = costs, Costs = sum(costs)))
}
## apply mtrace function to each of the drugs
## in all cases below, we assume treatment in the hospital is with CPZ, and thirdline treatment with FLUPHENAZINE LA
## for CPZ, second line is RIS
mTrace.cpz <- mtrace(primary = c(disAECPZ, disEffCPZ, disOtherCPZ, pHospCPZ, pWtCPZ, epsCPZ, diabCPZ, chlorpromazine_cost, chlorpromazine_qty),
secondary = c(disAERIS, disEffRIS, disOtherRIS, pHospRIS, pWtRIS, epsRIS, diabRIS, risperidone_cost, risperidone_qty),
pHospUntrt = pHospUntrt, pRemit = pRemitCPZ,
nStates = nStates, nCycles = nCycles)
## for HAL, second line is RIS
mTrace.hal <- mtrace(primary = c(disAEHAL, disEffHAL, disOtherHAL, pHospHAL, pWtHAL, epsHAL, diabHAL, haloperidol_cost, haloperidol_qty),
secondary = c(disAERIS, disEffRIS, disOtherRIS, pHospRIS, pWtRIS, epsRIS, diabRIS, risperidone_cost, risperidone_qty),
pHospUntrt = pHospUntrt, pRemit = pRemitCPZ,
nStates = nStates, nCycles = nCycles)
## for RIS, second line is HAL
mTrace.ris <- mtrace(primary = c(disAERIS, disEffRIS, disOtherRIS, pHospRIS, pWtRIS, epsRIS, diabRIS, risperidone_cost, risperidone_qty),
secondary = c(disAEHAL, disEffHAL, disOtherHAL, pHospHAL, pWtHAL, epsHAL, diabHAL, haloperidol_cost, haloperidol_qty),
pHospUntrt = pHospUntrt, pRemit = pRemitCPZ,
nStates = nStates, nCycles = nCycles)
## for OLA, second line is HAL
mTrace.ola <- mtrace(primary = c(disAEOLA, disEffOLA, disOtherOLA, pHospOLA, pWtOLA, epsOLA, diabOLA, olanzapine_cost, olanzapine_qty),
secondary = c(disAEHAL, disEffHAL, disOtherHAL, pHospHAL, pWtHAL, epsHAL, diabHAL, haloperidol_cost, haloperidol_qty),
pHospUntrt = pHospUntrt, pRemit = pRemitCPZ,
nStates = nStates, nCycles = nCycles)
## for QUE, second line is HAL
mTrace.que <- mtrace(primary = c(disAEQUE, disEffQUE, disOtherQUE, pHospQUE, pWtQUE, epsQUE, diabQUE, quetiapine_cost, quetiapine_qty),
secondary = c(disAEHAL, disEffHAL, disOtherHAL, pHospHAL, pWtHAL, epsHAL, diabHAL, haloperidol_cost, haloperidol_qty),
pHospUntrt = pHospUntrt, pRemit = pRemitCPZ,
nStates = nStates, nCycles = nCycles)
c(mTrace.cpz$DALYS, mTrace.hal$DALYS, mTrace.que$DALYS, mTrace.ris$DALYS, mTrace.ola$DALYS)
c(mTrace.cpz$Costs, mTrace.hal$Costs, mTrace.que$Costs, mTrace.ris$Costs, mTrace.ola$Costs)
plot(x=c(mTrace.cpz$DALYS, mTrace.hal$DALYS, mTrace.que$DALYS, mTrace.ris$DALYS, mTrace.ola$DALYS),
y=c(mTrace.cpz$Costs, mTrace.hal$Costs, mTrace.que$Costs, mTrace.ris$Costs, mTrace.ola$Costs),
pch = c(1, 2, 3, 4, 5),
col = c("red", "green","blue", "black", "orange"),
cex = 1,
xlab = "DALYs",
ylab = "Costs",
frame = FALSE)
ggplot() +
geom_point(aes(x=c(mTrace.cpz$DALYS, mTrace.hal$DALYS, mTrace.que$DALYS, mTrace.ris$DALYS, mTrace.ola$DALYS),
y=c(mTrace.cpz$Costs, mTrace.hal$Costs, mTrace.que$Costs, mTrace.ris$Costs, mTrace.ola$Costs)))
rm(list=ls())
# Load ggplot2
library(ggplot2)
library(hrbrthemes) # for style
# make data
data <- data.frame(
group=c("A ","B ","C ","D ") ,
value=c(33,62,56,67) ,
number_of_obs=c(100,500,459,342)
)
View(data)
# Calculate the future positions on the x axis of each bar (left border, central position, right border)
data$right <- cumsum(data$number_of_obs)
data$right2 <- data$right + 30*c(0:(nrow(data)-1))
c(0:(nrow(data)-1))
30*c(0:(nrow(data)-1))
data$left <- data$right2 - data$number_of_obs
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) +
xlab("number of obs") +
ylab("value") +
theme_ipsum() +
theme(legend.position="none")
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) +
xlab("number of obs") +
ylab("value") +
theme_minimal() +
theme(legend.position="none")
install.packages("hrbrthemes")
library(hrbrthemes) # for style
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) +
xlab("number of obs") +
ylab("value") +
theme_ipsum() +
theme(legend.position="none")
# Calculate the future positions on the x axis of each bar (left border, central position, right border)
data$right <- cumsum(data$number_of_obs)
data$right2 <- data$right + 30*c(0:(nrow(data)-1))
data$left <- data$right - data$number_of_obs
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) +
xlab("number of obs") +
ylab("value") +
theme_ipsum() +
theme(legend.position="none")
# Calculate the future positions on the x axis of each bar (left border, central position, right border)
data$right <- cumsum(data$number_of_obs) + 30*c(0:(nrow(data)-1))
#data$right2 <- data$right + 30*c(0:(nrow(data)-1))
data$left <- data$right - data$number_of_obs
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) +
xlab("number of obs") +
ylab("value") +
theme_ipsum() +
theme(legend.position="none")
rm(list=ls())
# define function for detaching variables
detachAllData <-
function ()
# define function for detaching variables
detachAllData <-
function ()
{
pos.to.detach <- (1:length(search()))[substring(search(),
first = 1, last = 8) != "package:" & search() != ".GlobalEnv" &
search() != "Autoloads" & search() != "CheckExEnv" & search() != "tools:rstudio" & search() != "TempEnv"]
for (i in 1:length(pos.to.detach)) {
if (length(pos.to.detach) > 0) {
detach(pos = pos.to.detach[1])
pos.to.detach <- (1:length(search()))[substring(search(),
first = 1, last = 8) != "package:" & search() !=
".GlobalEnv" & search() != "Autoloads" & search() !=
"CheckExEnv" & search() != "tools:rstudio" &
search() != "TempEnv"]
}
}
}
# run detach function
detachAllData()
# get functions we require
list.of.packages <- c("gtools")     # to sample from dirichlet distribution
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
rm(list=ls())
# Load ggplot2
library(ggplot2)
library(hrbrthemes) # for style
# make data
data <- data.frame(
group=c("A ","B ","C ","D ") ,
value=c(33,62,56,67) ,
number_of_obs=c(100,500,459,342)
)
# Calculate the future positions on the x axis of each bar (left border, central position, right border)
data$right <- cumsum(data$number_of_obs) + 30*c(0:(nrow(data)-1))
#data$right2 <- data$right + 30*c(0:(nrow(data)-1))
data$left <- data$right - data$number_of_obs
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) +
xlab("number of obs") +
ylab("value") +
theme_ipsum() +
theme(legend.position="none")
# Calculate the future positions on the x axis of each bar (left border, central position, right border)
data$right <- cumsum(data$number_of_obs)
data$right2 <- data$right + 30*c(0:(nrow(data)-1))
data$left <- data$right - data$number_of_obs
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right2, ymax = value, colour = group, fill = group)) +
xlab("number of obs") +
ylab("value") +
theme_ipsum() +
theme(legend.position="none")
# make data
data <- data.frame(
group=c("A ","B ","C ","D ") ,
value=c(33,62,56,67) ,
number_of_obs=c(100,500,459,342)
)
# Calculate the future positions on the x axis of each bar (left border, central position, right border)
data$right <- cumsum(data$number_of_obs)
data$right2 <- data$right + 30*c(0:(nrow(data)-1))
data$left <- data$right2 - data$number_of_obs
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right2, ymax = value, colour = group, fill = group)) +
xlab("number of obs") +
ylab("value") +
theme_ipsum() +
theme(legend.position="none")
